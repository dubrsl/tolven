/*
 * Copyright (C) 2010 Tolven Inc

 * This library is free software; you can redistribute it and/or modify it under the terms of 
 * the GNU Lesser General Public License as published by the Free Software Foundation; either 
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;  
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU Lesser General Public License for more details.
 *
 * Contact: info@tolvenhealth.com 
 *
 * @author <your name>
 * @version $Id$
 */

package org.tolven.restful;

import java.net.URI;
import java.net.URLEncoder;

import javax.annotation.ManagedBean;
import javax.ejb.EJB;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.tolven.app.TrimLocal;
import org.tolven.app.entity.TrimHeader;
import org.tolven.util.ExceptionFormatter;

@Path("trim")
@ManagedBean
public class TrimResources {

    @EJB
    private TrimLocal trimBean;

    @Context
    private HttpServletRequest request;

    /**
     * Upload a trim header
     * Requires user to have tolvenAdmin permission
     * @return id of created trim
     */
    @Path("upload")
    @POST
    @Consumes(MediaType.APPLICATION_XML)
    public Response uploadTrim(String content) {
        String comment = "";
        boolean autogenerated = false;
        String trimId = trimBean.createTrimHeader(content, request.getUserPrincipal().getName(), comment, autogenerated);
        URI createdUri = null;
        try {
            createdUri = new URI(URLEncoder.encode(trimId, "UTF-8"));
        } catch (Exception ex) {
            return Response.status(Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity(ExceptionFormatter.toSimpleString(ex, "\\n")).build();
        }
        return Response.created(createdUri).build();
    }

    /**
     * Activate uploaded trim headers. the caller should be prepared to call this
     * API in a loop for each time it returns with a status of continued.
     * A return of OK means that there are no more Trims left to activate.
     * Requires user to have tolvenAdmin permission
     */
    @Path("activate")
    @POST
    public Response activateTrims() {
        boolean more = trimBean.activateNewTrimHeaders();
        return Response.ok().entity(more).build();
    }

    /**
     * Queue activation of uploaded trim headers
     * Executes asynchronously
     * Requires user to have tolvenAdmin permission
     */
    @Path("queueActivate")
    @POST
    public Response queueActivateTrim() throws Exception {
        trimBean.queueActivateNewTrimHeaders();
        return Response.ok().build();
    }

    /**
     * Get a trim by name
     * @param name
     * @return
     */
    @Path("get")
    @GET
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_XML)
    public Response getTrim(@QueryParam("name") String name) {
        TrimHeader trimHeader = trimBean.findOptionalTrimHeader(name);
        if (trimHeader == null) {
            return Response.status(Status.NOT_FOUND).type(MediaType.TEXT_PLAIN).entity("TrimHeader not found").build();
        }
        return Response.ok().type(MediaType.APPLICATION_XML_TYPE).entity(trimHeader.getTrim()).build();
    }

}
