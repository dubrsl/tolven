<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="build-openam">

	<property file="build-v2-override.properties" />
	<property file="${password.properties.file}" />
	<property file="build-v2.properties" />
	<property file="${database.properties.file}" />

	<target name="props">
		<condition property="root.dir.default" value="c:" else="/usr/local">
			<os family="windows" />
		</condition>
		<basename property="tolven.kit.filename" file="${tolven.kit.zip}" suffix=".zip" />
		<property name="tolven.kit.dir" value="${tolven.kit.parent.dir}/${tolven.kit.filename}" />
		<property name="tolven.config.dir.default" value="${root.dir.default}/tolven-config" />
		<property name="credentials.dir.default" value="${tolven.config.dir.default}/credentials" />
		<property name="common.keystore.default" value="${credentials.dir.default}/${tolven.domain.default}/keystore.jks" />
		<property name="common.truststore.default" value="${credentials.dir.default}/${tolven.domain.default}/cacerts.jks" />
		<basename property="tomcat.dirname" file="${tomcat.zip}" suffix=".zip" />
		<property name="tomcat.dir" value="${tomcat.parent.dir}/${tomcat.dirname}" />
		<property name="ssoadmintools.dir" value="${tomcat.dir}/ssoAdminTools" />
		<property name="ssoadmintools.bin.dir" value="${ssoadmintools.dir}/openam/bin" />
		<condition property="tolvenstartup" value="${tomcat.dir}/bin/tolvenstartup.bat" else="${tomcat.dir}/bin/tolvenstartup.sh">
			<os family="windows" />
		</condition>
		<condition property="tpf" value="${tolven.kit.dir}/bin/tpf.bat" else="${tolven.kit.dir}/bin/tpf.sh">
			<os family="windows" />
		</condition>
		<condition property="tolvenshutdown" value="${tomcat.dir}/bin/tolvenshutdown.bat" else="${tomcat.dir}/bin/tolvenshutdown.sh">
			<os family="windows" />
		</condition>
		<condition property="tolven-sso-config" value="${ssoadmintools.bin.dir}/tolven-sso-config.bat" else="${ssoadmintools.bin.dir}/tolven-sso-config.sh">
			<os family="windows" />
		</condition>
		<condition property="ssoadm-setup" value="${ssoadmintools.dir}/setup.bat" else="${ssoadmintools.dir}/setup">
			<os family="windows" />
		</condition>
		<condition property="ssoadm" value="${ssoadmintools.bin.dir}/ssoadm.bat" else="${ssoadmintools.bin.dir}/ssoadm">
			<os family="windows" />
		</condition>
		<condition property="tolven.opends.dir.bin" value="${tolven.opends.dir}/bat" else="${tolven.opends.dir}/bin">
			<os family="windows" />
		</condition>
		<condition property="ldapmodify" value="${tolven.opends.dir.bin}/ldapmodify.bat" else="${tolven.opends.dir.bin}/ldapmodify">
			<os family="windows" />
		</condition>
	</target>

	<target name="install-requirements" depends="props" description="install-requirements">
		<fail message="tomcat.zip must be set" unless="tomcat.zip" />
		<fail message="openam.zip must be set" unless="openam.zip" />
		<fail message="${tomcat.zip} does not exist">
			<condition>
				<not>
					<available file="${tomcat.zip}" />
				</not>
			</condition>
		</fail>
		<fail message="${openam.zip} does not exist">
			<condition>
				<not>
					<available file="${openam.zip}" />
				</not>
			</condition>
		</fail>
		<fail message="${openam.config.plugin} does not exist">
			<condition>
				<not>
					<available file="${openam.config.plugin}" />
				</not>
			</condition>
		</fail>
		<fail message="${tomcat.dir} already exists">
			<condition>
				<available file="${tomcat.dir}" />
			</condition>
		</fail>
		<fail message="${config.opends.dir} already exists">
			<condition>
				<available file="${config.opends.dir}" />
			</condition>
		</fail>
		<fail message="${common.keystore.src} must exist">
			<condition>
				<not>
					<available file="${common.keystore.src}" />
				</not>
			</condition>
		</fail>
		<fail message="${common.truststore.src} must exist">
			<condition>
				<not>
					<available file="${common.truststore.src}" />
				</not>
			</condition>
		</fail>
		<echo message="${ant.project.name} install-requirements VERIFIED" />
		<echo message="${ant.project.name} to uninstall, remove: ${tomcat.dir}, ${config.opends.dir}" />
	</target>

	<target name="install" depends="props" description="install">
		<guide-echo args="Install OpenAM" />
		<guide-echo args="" />

		<guide-echo args="Copy SSL keystore from ${common.keystore.src} to ${openam.keystore}" />
		<copy file="${common.keystore.src}" tofile="${openam.keystore}" overwrite="false" verbose="true" />
		<guide-echo args="Copy SSL truststore from ${common.truststore.src} to ${openam.truststore}" />
		<copy file="${common.truststore.src}" tofile="${openam.truststore}" overwrite="false" verbose="true" />
		<guide-echo args="" />
		<guide-echo args="Assemble Tolven OpenAM Library Jar" />
		<tpf args="-plugin org.tolven.assembler.library -libPlugin org.tolven.openam" />
		<guide-echo args="" />
		<guide-echo args="Unzip Tomcat" />
		<guide-echo args="Unzip ${tomcat.zip} to ${tomcat.parent.dir}" />
		<unzip src="${tomcat.zip}" dest="${tomcat.parent.dir}">
			<patternset excludes="${tomcat.dir}/webapps/docs/**">
				<exclude name="**/webapps/docs/**" />
				<exclude name="**/webapps/examples/**" />
				<exclude name="**/webapps/host-manager/**" />
				<exclude name="**/webapps/manager/**" />
				<exclude name="**/webapps/ROOT/**" />
			</patternset>
		</unzip>
		<guide-echo args="Delete following directories from ${tomcat.dir}/webapps" />
		<!-- These directories were excluded by the previous unzip -->
		<guide-echo args="docs" />
		<guide-echo args="examples" />
		<guide-echo args="host-manager" />
		<guide-echo args="manager" />
		<guide-echo args="ROOT" />
		<guide-echo args="" />

		<guide-echo args="Unzip Tolven OpenAM Config Plugin" />
		<guide-echo args="Unzip: ${openam.config.plugin} to ${tomcat.dir}" />
		<unzip src="${openam.config.plugin}" dest="${tomcat.dir}" />
		<guide-echo args="" />
		<delete dir="${java.io.tmpdir}/opensso" />
		<guide-echo args="" />

		<guide-echo args="Unzip opensso.war File" />
		<guide-echo args="Unzip: opensso/deployable-war/opensso.war from ${openam.zip}" />
		<guide-echo args="Place opensso.war file in a temporary directory in preparation for its update" />
		<unzip src="${openam.zip}" dest="${java.io.tmpdir}">
			<patternset>
				<include name="**/opensso.war" />
			</patternset>
		</unzip>
		<guide-echo args="" />
		<guide-echo args="Update opensso.war File" />
		<guide-echo args="Place the contents (not the web directory itself) of the following directory into opensso.war maintaining the hierarchy" />
		<guide-echo args="${tolven.config.dir}/build/repositoryStage/org.tolven.openam/web" />
		<zip destfile="${java.io.tmpdir}/opensso/deployable-war/opensso.war" update="true">
			<zipfileset dir="${tolven.config.dir}/build/repositoryStage/org.tolven.openam/web" />
		</zip>
		<guide-echo args="Move opensso.war to ${tomcat.dir}/webapps and rename to openam.war" />
		<move file="${java.io.tmpdir}/opensso/deployable-war/opensso.war" tofile="${tomcat.dir}/webapps/openam.war" />
		<guide-echo args="" />

		<guide-echo args="Install ssoAdminTools" />
		<guide-echo args="Unzip: opensso/tools/ssoAdminTools.zip from ${openam.zip} to a temporary directory" />
		<unzip src="${openam.zip}" dest="${java.io.tmpdir}">
			<patternset>
				<include name="**/ssoAdminTools.zip" />
			</patternset>
		</unzip>
		<guide-echo args="Create directory: ${ssoadmintools.dir}" />
		<mkdir dir="${ssoadmintools.dir}" />
		<guide-echo args="Unzip ssoAdminTools.zip to ${ssoadmintools.dir}" />
		<unzip src="${java.io.tmpdir}/opensso/tools/ssoAdminTools.zip" dest="${ssoadmintools.dir}" />
		<guide-echo args="" />
		<guide-echo args="Unzip: opensso/tools/ssoConfiguratorTools.zip from ${openam.zip}" />
		<unzip src="${openam.zip}" dest="${java.io.tmpdir}">
			<patternset>
				<include name="**/ssoConfiguratorTools.zip" />
			</patternset>
		</unzip>
		<guide-echo args="Create directory: ${ssoadmintools.bin.dir}" />
		<mkdir dir="${ssoadmintools.bin.dir}" />
		<guide-echo args="Unzip ssoConfiguratorTools.zip to ${ssoadmintools.bin.dir}" />
		<unzip src="${java.io.tmpdir}/opensso/tools/ssoConfiguratorTools.zip" dest="${ssoadmintools.bin.dir}" />
		<delete dir="${java.io.tmpdir}/opensso" />
		<guide-echo args="Copy ${ssoadmintools.bin.dir}/sampleconfiguration and rename to ${ssoadmintools.bin.dir}/tolvenconfiguration" />
		<copy file="${ssoadmintools.bin.dir}/sampleconfiguration" tofile="${ssoadmintools.bin.dir}/tolvenconfiguration" preservelastmodified="true" overwrite="true" verbose="true" />
		<guide-echo args="" />

		<guide-echo args="Enable HTTPS Access" />
		<guide-echo args="Edit ${tomcat.dir}/conf/server.xml" />
		<guide-echo args="Replace the 8080 Connector with the following (NB The application server installed later will use 8080 by default):" />
		<guide-echo args="&lt;Connector port=&quot;8444&quot; protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot;" />
		<guide-echo args="     SSLEnabled=&quot;true&quot;" />
		<guide-echo args="     maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot;" />
		<guide-echo args="     clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;" />
		<guide-echo args="     keystoreFile=&quot;${openam.keystore}&quot;" />
		<guide-echo args="     keystorePass=&quot;tolven&quot;" />
		<guide-echo args="     keyAlias=&quot;tolven&quot;/>" />
		<replace token="Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;" value="Connector address=&quot;${sso.domain}&quot; port=&quot;${sso.port}&quot; protocol=&quot;HTTP/1.1&quot; SSLEnabled=&quot;true&quot;" file="${tomcat.dir}/conf/server.xml" />
		<replace token="connectionTimeout=&quot;20000&quot;" value="maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot; clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; keystoreFile=&quot;${openam.keystore}&quot; keystorePass=&quot;${openam.keystore.password}&quot;" file="${tomcat.dir}/conf/server.xml" />
		<replace token="redirectPort=&quot;8443&quot;" value="" file="${tomcat.dir}/conf/server.xml" />
		<replace token="&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot;  />" value="&lt;Connector address=&quot;${sso.domain}&quot; port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;${sso.port}&quot; scheme=&quot;https&quot; secure=&quot;true&quot; emptySessionPath=&quot;true&quot; enableLookups=&quot;false&quot; />" file="${tomcat.dir}/conf/server.xml" />
		<guide-echo args="" />

		<guide-echo args="Check the following properties for files prefixed with 'tolven' in ${tomcat.dir}/bin" />
		<guide-echo args="${common.keystore.default}" />
		<replace token="${common.keystore.default}" value="${openam.keystore}" dir="${tomcat.dir}/bin" includes="tolven*" />
		<guide-echo args="javax.net.ssl.keyStorePassword=${tolven.password.default}" />
		<replace token="javax.net.ssl.keyStorePassword=${tolven.password.default}" value="javax.net.ssl.keyStorePassword=${openam.keystore.password}" dir="${tomcat.dir}/bin" includes="tolven*" />
		<guide-echo args="${common.truststore.default}" />
		<replace token="${common.truststore.default}" value="${openam.truststore}" dir="${tomcat.dir}/bin" includes="tolven*" />
		<guide-echo args="javax.net.ssl.trustStorePassword=${tolven.password.default}" />
		<replace token="javax.net.ssl.trustStorePassword=${tolven.password.default}" value="javax.net.ssl.trustStorePassword=${openam.truststore.password}" dir="${tomcat.dir}/bin" includes="tolven*" />
		<guide-echo args="${tolven.domain.default}" />
		<replace token="${tolven.domain.default}" value="${tolven.domain}" dir="${tomcat.dir}/bin" />
		<guide-echo args="" />

		<guide-echo args="Check ALL the files in ${tomcat.dir}/openam-conf for the following values" />
		<guide-echo args="${tolven.opends.domain.default}:${tolven.opends.ldap.port.default}" />
		<replace token="${tolven.opends.domain.default}:${tolven.opends.ldap.port.default}" value="${tolven.opends.domain}:${tolven.opends.ldap.port}" dir="${tomcat.dir}/openam-conf" />
		<guide-echo args="sun-idrepo-ldapv3-config-ldap-server=${tolven.opends.domain.default}:${tolven.opends.ldap.port.default}" />
		<replace token="sun-idrepo-ldapv3-config-ldap-server=${tolven.opends.domain.default}:${tolven.opends.ldap.port.default}" value="sun-idrepo-ldapv3-config-ldap-server=${tolven.opends.domain}:${tolven.opends.ldap.port}" dir="${tomcat.dir}/openam-conf" />
		<guide-echo args="sun-idrepo-ldapv3-config-authpw=${manager.password.default}" />
		<replace token="sun-idrepo-ldapv3-config-authpw=${manager.password.default}" value="sun-idrepo-ldapv3-config-authpw=${manager.password}" dir="${tomcat.dir}/openam-conf" />
		<guide-echo args="${tolven.opends.basedn.default}" />
		<replace token="${tolven.opends.basedn.default}" value="${tolven.opends.basedn}" dir="${tomcat.dir}/openam-conf" />
		<guide-echo args="-*-${cookie.domain.default}:${tolven.https.port.default}" />
		<replace token="-*-${cookie.domain.default}:${tolven.https.port.default}" value="-*-${cookie.domain}:${tolven.https.port}" dir="${tomcat.dir}/openam-conf" />
		<guide-echo args="${tolven.domain.default}:${tolven.https.port.default}" />
		<replace token="${tolven.domain.default}:${tolven.https.port.default}" value="${tolven.domain}:${tolven.https.port}" dir="${tomcat.dir}/openam-conf" />
		<guide-echo args="${tolven.domain.default}:${sso.port.default}" />
		<replace token="${tolven.domain.default}:${sso.port.default}" value="${tolven.domain}:${sso.port}" dir="${tomcat.dir}/openam-conf" />
		<guide-echo args="${tolven.domain.default}" />
		<replace token="${tolven.domain.default}" value="${tolven.domain}" dir="${tomcat.dir}/openam-conf" />
		<guide-echo args="" />

		<guide-echo args="Check the following properties for the file pre-agent-ssoadm-batch.txt and also files prefixed with 'tolven' ${ssoadmintools.bin.dir}" />
		<guide-echo args="${common.keystore.default}" />
		<replace token="${common.keystore.default}" value="${openam.keystore}" dir="${ssoadmintools.bin.dir}" includes="pre-agent-ssoadm-batch.txt,tolven*" />
		<guide-echo args="javax.net.ssl.keyStorePassword=${tolven.password.default}" />
		<replace token="javax.net.ssl.keyStorePassword=${tolven.password.default}" value="javax.net.ssl.keyStorePassword=${openam.keystore.password}" dir="${ssoadmintools.bin.dir}" includes="pre-agent-ssoadm-batch.txt,tolven*" />
		<guide-echo args="${common.truststore.default}" />
		<replace token="${common.truststore.default}" value="${openam.truststore}" dir="${ssoadmintools.bin.dir}" includes="pre-agent-ssoadm-batch.txt,tolven*" />
		<guide-echo args="javax.net.ssl.trustStorePassword=${tolven.password.default}" />
		<replace token="javax.net.ssl.trustStorePassword=${tolven.password.default}" value="javax.net.ssl.trustStorePassword=${openam.truststore.password}" dir="${ssoadmintools.bin.dir}" includes="pre-agent-ssoadm-batch.txt,tolven*" />
		<guide-echo args="${tolven.opends.domain.default}:${tolven.opends.ldap.port.default}" />
		<replace token="${tolven.opends.domain.default}:${tolven.opends.ldap.port.default}" value="${tolven.opends.domain}:${tolven.opends.ldap.port}" dir="${ssoadmintools.bin.dir}" includes="pre-agent-ssoadm-batch.txt,tolven*" />
		<guide-echo args="" />

		<guide-echo args="For linux ensure that the following are executable" />
		<guide-echo args="${tomcat.dir}/bin/*.sh" />
		<guide-echo args="${ssoadmintools.bin.dir}/*.sh" />
		<chmod dir="${tomcat.dir}" perm="u+x" includes="**/*.sh" />
		<guide-echo args="${ssoadm-setup}" />
		<chmod file="${ssoadm-setup}" perm="u+x" />
		<guide-echo args="${ssoadm}" />
		<chmod file="${ssoadm}" perm="u+x" />
		<guide-echo args="" />

	</target>

	<target name="start-openam" depends="props" description="start-openam">
		<echo message="Starting openam..." />
		<exec executable="${tolvenstartup}" dir="${tomcat.dir}/bin" spawn="true" />
		<echo message="Waiting for openam to start..." />
		<property name="Login.jsp" value="${tomcat.dir}/webapps/openam/config/auth/opensso/services/tolven/html/Login.jsp" />
		<waitfor maxwait="600" maxwaitunit="second" timeoutproperty="timed.out">
			<available file="${Login.jsp}" />
		</waitfor>
		<fail message="openam appears to not have started since the following file was not found: ${Login.jsp}" if="timed.out" />
		<echo message="Done" />
	</target>

	<target name="config-openam" depends="props" description="config-openam">
		<guide-echo args="Configure OpenAM" />
		<guide-echo args="" />

		<guide-echo args="Check the contents of ${ssoadmintools.bin.dir}/tolvenconfiguration to ensure that domain names, hosts, etc. match your network configuration" />
		<replace token="SERVER_URL=http://server1.example.com:8080" value="SERVER_URL=https://${sso.domain}:${sso.port}" file="${ssoadmintools.bin.dir}/tolvenconfiguration" />
		<replace token="DEPLOYMENT_URI=/opensso" value="DEPLOYMENT_URI=/openam" file="${ssoadmintools.bin.dir}/tolvenconfiguration" />
		<replace token="BASE_DIR=/opensso" value="BASE_DIR=${config.opends.dir}/openam" file="${ssoadmintools.bin.dir}/tolvenconfiguration" />
		<replace token="ADMIN_PWD=11111111" value="ADMIN_PWD=${amadmin.password}" file="${ssoadmintools.bin.dir}/tolvenconfiguration" />
		<replace token="AMLDAPUSERPASSWD=00000000" value="AMLDAPUSERPASSWD=${amldapuser.password}" file="${ssoadmintools.bin.dir}/tolvenconfiguration" />
		<replace token="COOKIE_DOMAIN=.example.com" value="COOKIE_DOMAIN=${cookie.domain}" file="${ssoadmintools.bin.dir}/tolvenconfiguration" />
		<replace token="DIRECTORY_SERVER=server1.example.com" value="DIRECTORY_SERVER=${sso.domain}" file="${ssoadmintools.bin.dir}/tolvenconfiguration" />
		<replace token="DIRECTORY_ADMIN_PORT=4444" value="DIRECTORY_ADMIN_PORT=${config.opends.admin.port}" file="${ssoadmintools.bin.dir}/tolvenconfiguration" />
		<replace token="ROOT_SUFFIX=dc=opensso,dc=java,dc=net" value="ROOT_SUFFIX=${config.opends.basedn}" file="${ssoadmintools.bin.dir}/tolvenconfiguration" />
		<replace token="DS_DIRMGRDN=cn=Directory Manager" value="DS_DIRMGRDN=${config.opends.rootdn}" file="${ssoadmintools.bin.dir}/tolvenconfiguration" />
		<replace token="DS_DIRMGRPASSWD=11111111" value="DS_DIRMGRPASSWD=${config.opends.rootdn.password}" file="${ssoadmintools.bin.dir}/tolvenconfiguration" />
		<guide-echo args="" />
		<!-- NB The following replace is required due a bug in the ssoadm-setup file -->
		<replace token="ENDLOCAL" value="ENDLOCAL &amp; exit 0" file="${ssoadm-setup}" />
		<guide-echo args="Execute the configurator" />
		<guide-echo args="cd ${ssoadmintools.bin.dir}" />
		<basename property="tolven-sso-config.basename" file="${tolven-sso-config}" />
		<guide-echo args="${tolven-sso-config.basename}" />
		<exec executable="${tolven-sso-config}" dir="${ssoadmintools.bin.dir}" failonerror="true" />
		<guide-echo args="" />
		<guide-echo args="Execute the OpenAM setup script" />
		<guide-echo args="cd ${ssoadmintools.bin.dir}" />
		<exec executable="${ssoadm-setup}" dir="${ssoadmintools.dir}" failonerror="true">
			<arg line="-p ${config.opends.dir}/openam -d ${ssoadmintools.dir}/debug -l ${ssoadmintools.dir}/log" />
		</exec>
		<exec executable="${ldapmodify}" dir="${tolven.opends.dir.bin}" failonerror="true">
			<arg line="-h ${config.opends.domain} -p ${config.opends.ldap.port} -D &quot;${config.opends.rootdn}&quot; -w ${config.opends.rootdn.password} -X --filename ${tolven.opends.dir}/tolven-delegation.ldif" />
		</exec>
		<guide-echo args="Add the following java options to ${ssoadm}" />
		<guide-echo args="-Djavax.net.ssl.keyStore=${openam.keystore}" />
		<guide-echo args="-Djavax.net.ssl.keyStorePassword=${openam.keystore.password}" />
		<guide-echo args="-Djavax.net.ssl.trustStore=${openam.truststore}" />
		<guide-echo args="-Djavax.net.ssl.trustStorePassword=${openam.truststore.password}" />
		<replace token=" -cp " value=" -Djavax.net.ssl.keyStore=${openam.keystore} -Djavax.net.ssl.keyStorePassword=${openam.keystore.password} -Djavax.net.ssl.trustStore=${openam.truststore} -Djavax.net.ssl.trustStorePassword=${openam.truststore.password} -Djava.security.egd=file:///dev/urandom -cp " file="${ssoadm}" />
		<guide-echo args="" />
		<guide-echo args="Check the authagent password in ${ssoadmintools.bin.dir}/pre-agent-ssoadm-batch.txt (default: ${admin.password.default})" />
		<replace token="userpassword=${admin.password.default}" value="userpassword=${agentauth.password}" file="${ssoadmintools.bin.dir}/pre-agent-ssoadm-batch.txt" />
		<guide-echo args="" />
		<guide-echo args="Create an amadmin.password file ${ssoadmintools.bin.dir}/amadminpassword with the amadmin password as its only line" />
		<concat destfile="${ssoadmintools.bin.dir}/amadminpassword" append="false">${amadmin.password}</concat>
		<guide-echo args="" />
		<guide-echo args="For linux ensure that ${ssoadm} is executable" />
		<chmod file="${ssoadm}" perm="u+x" />
		<guide-echo args="For linux ensure that ${ssoadmintools.bin.dir}/amadminpassword has one permission which is read only by owner" />
		<chmod file="${ssoadmintools.bin.dir}/amadminpassword" perm="400" />
		<guide-echo args="" />
		<guide-echo args="Execute the following ssoadm commands" />
		<guide-echo args="cd ${ssoadmintools.bin.dir}" />
		<ssoadm args="do-batch -Z pre-agent-ssoadm-batch.txt" />
		<ssoadm args="update-datastore -e tolven -m tolven -D ${tomcat.dir}/openam-conf/tolven-datastore-with-extensions.txt" />
		<ssoadm args="update-agent -e / -b wsp -a &quot;userpassword=${agentauth.password}&quot; &quot;SecurityMech=urn:sun:wss:security:null:UserNameToken-Plain&quot; &quot;authenticationChain=ldapService&quot; &quot;isRequestSign=false&quot; &quot;keepSecurityHeaders=false&quot;" />
		<antcall target="create-j2ee-agent" />
		<ssoadm args="update-agent -e / -b agentAuth -a &quot;userpassword=${agentauth.password}&quot;" />
		<guide-echo args="" />
	</target>

	<target name="stop-openam" depends="props" description="config-openam">
		<echo message="Stopping openam..." />
		<exec executable="${tolvenshutdown}" dir="${tomcat.dir}/bin" failonerror="true" />
	</target>

	<target name="create-j2ee-agent" depends="props" description="create-j2ee-agent">
		<ssoadm args="create-agent -e / -b ${j2ee.agent} -t J2EEAgent -a &quot;userpassword=${agentauth.password}&quot; -s https://${sso.domain}:8444/openam -g https://${tolven.domain}:8443/agentapp" />
		<ssoadm args="update-agent -e / -b ${j2ee.agent} -D ../../../openam-conf/tolven-agent-attributes.txt" />
		<ssoadm args="update-agent -e / -b agentAuth -a ${sso.agentsAllowedToReadAttribute}" />
	</target>

	<macrodef name="tpf">
		<attribute name="args" />
		<sequential>
			<guide-echo args="cd ${tolven.kit.dir}/bin" />
			<basename property="tpf.basename" file="${tpf}" />
			<guide-echo args="${tpf.basename} @{args}" />
			<echo message="${tpf} @{args}" />
			<exec executable="${tpf}" dir="${tolven.kit.dir}/bin" failonerror="true">
				<arg line="@{args}" />
			</exec>
			<echo message="Done" />
			<echo message="" />
			<guide-echo args="" />
		</sequential>
	</macrodef>

	<macrodef name="ssoadm">
		<attribute name="args" />
		<sequential>
			<guide-echo args="${ssoadm} @{args}" />
			<echo message="${ssoadm} @{args}" />
			<exec executable="${ssoadm}" dir="${ssoadmintools.bin.dir}" failonerror="true">
				<arg line="@{args} -u amAdmin -f ${ssoadmintools.bin.dir}/amadminpassword" />
			</exec>
			<echo message="Done" />
			<echo message="" />
		</sequential>
	</macrodef>

	<macrodef name="guide-echo">
		<attribute name="args" />
		<sequential>
			<echo message="@{args}${line.separator}" file="${guide.file}" append="true" />
		</sequential>
	</macrodef>

</project>
