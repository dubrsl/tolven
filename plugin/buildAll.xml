<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="cleanBuildDeployPlugins" name="buildAllPlugins">
	<!--
	   To Build from scratch, clear out your repositoryLocal dir and run the following commands:
	******************
	1. clean (includes devLib [from managePlugins] )
	2. build
	3. deploy (includes updateLocalMetaData [from managePlugins] )
	4. clean-build-deploy (includes updateLocalMetaData [from managePlugins] )
	5. build-deploy  (includes updateLocalMetaData [from managePlugins] )
	6. build-deploy-configPhase1
	7. clean-build-deploy-configPhase1
	
	***************************
	build.files list is defined in pluginsToBuild.xml - this list contains ALL plugins (including ONC)

	***************************
	To configure a custom list of plugins to build, create a file such as buildCustom.xml (which looks like pluginsToBuild.xml)
	 and add the property like the following to your build.properties file:
	
	pluginsToBuildloc=../plugin/buildCustom.xml
	
	-->
	<import file="../plugin/buildCommon.xml"/>

	<property file="../plugin/build.properties"/>

	<property name="pluginsToBuildloc" value="../plugin/pluginsToBuild.xml" />

	<import file="${pluginsToBuildloc}" />

	<target name="cleanPlugins">
		<!-- Clears out all files from the devLib -->
		<ant antfile="managePlugins.xml" target="cleanDevLib" />
		<!-- Removes the build directory of all plugins related to build.files -->
		<subant target="clean" failonerror="false" buildpathref="build.files" />
		<delete file="plugin.log" />
	</target>

	<target name="buildPlugins">
		<!-- Builds each of the plugins related to build.files and copies their devLibs to your tolven-config/devLib -->
		<subant target="gen-build-plugin" buildpathref="build.files" />
	</target>

	<target name="deployPlugins">
		<!--Copy built plugins to local repository -->
		<subant target="copy-plugin-to-local-repository" buildpathref="build.files" />
		<!-- Update the local metadata -->
		<ant antfile="managePlugins.xml" target="updateLocalMetaData" />
	</target>

	<target name="configPhase1">
		<!--Runs repositoryInit (getPlugins), configPhase1, etc)-->
		<ant antfile="managePlugins.xml" target="configPhase1" />
	</target>

	<target name="cleanBuildDeployPlugins" depends="cleanPlugins,buildPlugins,deployPlugins"/>

	<target name="buildDeployPlugins" depends="buildPlugins,deployPlugins"/>

	<target name="buildDeployConfigPhase1Plugins" depends="buildPlugins,deployPlugins,configPhase1"/>

	<target name="cleanBuildDeployConfigPhase1Plugins" depends="cleanPlugins,buildPlugins,deployPlugins,configPhase1"/>


	<!-- The following property and target are for use (temporarily) if you are not linking to the catalog in your plugins.xml
	See Tolven internal site: https://tolven.jira.com/wiki/display/TOLVENCORE/Building+your+V2.1+environment+with+no+connection+to+the+catalog
	-->

	<property name="respositoryLocalStand.location" value="${tolvenConfig.location}/repositoryLocalStand"/>
	<target name="updateLocalMetaDataStand" description="Update plugins metadata in repositoryLocalStand">
		<java fork="true" failonerror="true" classname="org.tolven.plugin.boot.TPFBoot" classpathref="project.classpath">
			<env key="TOLVEN_REALM" value="${admin.realm}"/>
			<env key="TOLVEN_USER" value="${admin.user}"/>
			<env key="TOLVEN_PASSWORD" value="${admin.password}"/>
			<env key="TOLVEN_CONFIG_DIR" value="${tolvenConfig.location}"/>
			<arg line="-genMetadata -plugins ${respositoryLocalStand.location}/plugins -liburl file:///${respositoryLocalStand.location} -outdir ${respositoryLocalStand.location}" />
		</java>
	</target>

	<!-- This target will create three files in the plugin manager directory: plugins-local.log, plugins-published.log, plugins-unpublished.log -->
	<!-- The catalog.url must be set in the build.properties file -->
	<!-- The latest snapshot.pluginsxml.url must be set in the build.properties file -->
	<target name="check-plugin-versions">
		<fail unless="catalog.url" message="catalog.url must be defined in your build.properties file" />
		<fail unless="snapshot.pluginsxml.url" message="snapshot.pluginsxml.url must be defined in your build.properties file" />
		<property name="plugins-published.log" value="${basedir}/plugins-published.log" />
		<property name="plugins-local.log" value="${java.io.tmpdir}/plugins-local.log" />
		<property name="plugins-unpublished.log" value="${java.io.tmpdir}/plugins-unpublished.log" />
		<property name="snapshot.pluginsxml" value="${java.io.tmpdir}/snapshot.pluginsxml" />
		<delete file="${plugins-local.log}" />
		<delete file="${plugins-published.log}" />
		<delete file="${plugins-unpublished.log}" />
		<get src="${snapshot.pluginsxml.url}" dest="${snapshot.pluginsxml}" />
		<copy file="${snapshot.pluginsxml}" tofile="${plugins-published.log}">
			<filterchain>
				<linecontains>
					<contains value="&lt;uri>" />
				</linecontains>
				<tokenfilter>
					<replaceregex pattern="&lt;uri>${catalog.url}/plugins/" replace="" flags="gi" />
					<replaceregex pattern=".zip&lt;/uri>" replace="" flags="gi" />
					<replaceregex pattern="\ " replace="" flags="gi" />
				</tokenfilter>
			</filterchain>
		</copy>
		<delete file="${snapshot.pluginsxml}" />
		<delete file="${plugins-local.log}" />
		<delete file="${plugins-unpublished.log}" />
		<subant target="log-plugin-local-version" buildpathref="build.files" inheritall="true" inheritrefs="true" />
		<copy file="${plugins-local.log}" tofile="plugins-local.log">
			<filterchain><sortfilter /></filterchain>
		</copy>
		<copy file="${plugins-unpublished.log}" tofile="plugins-unpublished.log">
			<filterchain><sortfilter /></filterchain>
		</copy>
		<delete file="${plugins-local.log}" />
		<delete file="${plugins-unpublished.log}" />
	</target>

</project>

