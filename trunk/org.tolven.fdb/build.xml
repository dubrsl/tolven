<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="deploy-to-local-repository" name="org.tolven.fdb">
	<!-- 
	Build file for org.tolven.fdb 
	-->
	<import file="../plugin/buildImport.xml"/>

	<property name="buildFolder" value="build"/>
	<!-- 
	Source code will be included in the devLib jar file if true. Otherwise, source code
	known to this build script (in the sources folder) will not be added to the plugin.
	Source code may be published in devLib for several reasons: 1) remote-debugging, 
	2) it meets the obligation to make source code available with most open-source licenses,
	3) Provides a way to verify that a particular plugin version has a particular 
	source-code change. But this is not a substitute for source-code management tools.
	 -->
	<property name="includeSourceInDevLib" value="true"/>

	<!-- 
	The "build-plugin" target builds one or more sections, each section consisting of a source directory and
	any other files needed by the manifest/tolven-plugin.xml. You are free to remove any sections that you don't use
	and add sections if needed. In any case, the folders (sections) mentioned here should correspond to the filters
	mentioned in the manifest.
	-->
	<path id="plugin.classpath">
		<pathelement location="${buildFolder}/ejb/classes"/>
		<pathelement location="${buildFolder}/web/classes"/>
		<pathelement location="lib/openssoclientsdk.jar"/>
	</path>

	<target name="build-plugin" depends="jar" description="Build all sections of this plugin">
		<zip destfile="${zipFileName}">
			<!-- Add Manifest section -->
			<zipfileset dir="manifest"/>
		</zip>
		<!-- Begin list of sections to build. Each section is added to the plugin zip file. -->
		<antcall target="buildSection">
			<param name="section" value="ejb"/>
		</antcall>
		<antcall target="buildSection">
			<param name="section" value="app"/>
		</antcall>
		<mkdir dir="${buildFolder}/web/classes"/>
		<javac destdir="${buildFolder}/web/classes" debug="true">
			<src path="web/source" />
			<classpath refid="project.classpath" />
			<classpath path="web/lib/openssoclientsdk.jar" />
			<classpath path="${buildFolder}/ejb/classes" />
		</javac>

		<!-- End of list of sections to build -->
		<!-- Add DevLib.jar to plugin zip -->
		<zip destfile="${zipFileName}" update="true">
			<zipfileset dir="${buildFolder}">
				<include name="devLib.jar"/>
				<include name="**/*.class"/>
			</zipfileset>
			<zipfileset dir="." includes="scriptInclude/*.*"/>
			<zipfileset dir="web">
				<exclude name="**/openssoclientsdk.jar"/>
			</zipfileset>
		</zip>
	</target>
	<target  name="compile" depends="init" description="Compile Tolven EJB modules">
		<mkdir dir="build/bin"/>
		<javac destdir="build/bin" excludes="test/org/**,test/rules/**" debug="true" encoding="UTF-8" >
			<src path="src" />
			<classpath refid="project.classpath"/>
			<classpath>
				<fileset dir="ejb/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
	</target>
	
	<target name="jar" depends="compile" description="devLib.jar">
		<jar destfile="build/devLib.jar">
			<zipfileset dir="src" excludes="test/org/**,test/rules/**" />
			<zipfileset dir="${buildFolder}/bin" excludes="test/org/**,test/rules/**" />
		</jar>
	</target>

	<path id="classpath-openjpa" description="The classpath to use for compiling and running">
		<pathelement path="build/ejb/classes" />
		<fileset dir="${basedir}/ejb/lib">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${basedir}/lib">
			<include name="slf4j-api-*.jar" />
			<include name="slf4j-simple-*.jar" />
			<include name="shiro-core-*.jar" />
			<include name="openjpa-all-*.jar" />
			<include name="postgresql-*.jdbc4.jar" />
		</fileset>
		<fileset dir="${tolvenConfig.location}/devLib">
			<include name="*.jar" />
			<exclude name="org.tolven.library.apache-ant.ant.jar"/>
			<exclude name="org.tolven.fdb.devLib.jar"/>
		</fileset>
	</path>

	<path id="javaagent">
		<fileset dir="${basedir}/lib">
			<include name="openjpa-*.jar" />
			<exclude name="openjpa-all-*.jar" />
		</fileset>
	</path>
	<pathconvert property="javaagent" refid="javaagent" />


	<target name="run-unit-tests" depends="build-plugin" description="Run the example Main program">
		<copy todir="build/ejb/classes/META-INF">
			<fileset dir="testResources/META-INF" />
		</copy>
		<junit fork="yes" haltonfailure="yes">
			<test name="test.org.tolven.app.bean.TestFDBBean" />
			<formatter type="plain" usefile="false" />
			<classpath  refid="classpath-openjpa" />
			<jvmarg value="-javaagent:${javaagent}" />

			<!-- Tell OpenJPA to automatically create tables in the databasefor entities. 
				Note that this should be disabled when running against a production database, 
				since you probably don't want to be altering the schema at runtime. -->
			<!--sysproperty key="openjpa.jdbc.SynchronizeMappings"
					value="buildSchema" /-->

			<!-- Output all SQL and set the general logging level to show warnings. 
					Turn off SQL trace for production. -->
			<!--sysproperty key="openjpa.Log" value="DefaultLevel=INFO,SQL=TRACE" /-->
			<sysproperty key="openjpa.Log" value="DefaultLevel=INFO"/>

		</junit>
	</target>

</project>
