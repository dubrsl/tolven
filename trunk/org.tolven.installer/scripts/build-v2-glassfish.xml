<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="build-glassfish">

	<property file="build-v2-override.properties" />
	<property file="${password.properties.file}" />
	<property file="build-v2.properties" />
	<property file="${database.properties.file}" />

	<target name="props">
		<condition property="root.dir.default" value="c:" else="/usr/local">
			<os family="windows" />
		</condition>
		<property name="tolven.config.dir.default" value="${root.dir.default}/tolven-config" />
		<property name="credentials.dir.default" value="${tolven.config.dir.default}/credentials" />
		<basename property="tolven.kit.filename" file="${tolven.kit.zip}" suffix=".zip" />
		<property name="tolven.kit.dir" value="${tolven.kit.parent.dir}/${tolven.kit.filename}" />
		<property name="imq.dest.config.properties.file" value="${glassfish.dir}/glassfish/domains/tolven/imq/instances/imqbroker/props/config.properties" />
		<property name="imq.accesscontrol.properties" value="${glassfish.dir}/glassfish/domains/tolven/imq/instances/imqbroker/etc/accesscontrol.properties" />
		<property name="imq.passwd.file" value="${glassfish.dir}/glassfish/domains/tolven/imq/instances/imqbroker/etc/passwd" />
		<basename property="mdbuser.keystore.filename" file="${mdbuser.keystore}" />
		<property name="glassfish.config.dir" value="${glassfish.dir}/glassfish/domains/tolven/config" />
		<property name="glassfish.deploy.dir" value="${glassfish.dir}/glassfish/domains/tolven/autodeploy" />
		<property name="tolven.stage.dir" value="${tolven.config.dir}/build/repositoryStage" />
		<basename property="tomcat.dirname" file="${tomcat.zip}" suffix=".zip" />
		<property name="tomcat.dir" value="${tomcat.parent.dir}/${tomcat.dirname}" />
		<condition property="asadmin" value="${glassfish.dir}/bin/asadmin.bat" else="${glassfish.dir}/bin/asadmin">
			<os family="windows" />
		</condition>
		<condition property="imqusermgr" value="${glassfish.dir}/mq/bin/imqusermgr.exe" else="${glassfish.dir}/mq/bin/imqusermgr">
			<os family="windows" />
		</condition>
		<condition property="repositoryInit" value="${tolven.kit.dir}/bin/repositoryInit.bat" else="${tolven.kit.dir}/bin/repositoryInit.sh">
			<os family="windows" />
		</condition>
		<condition property="genMetadata" value="${tolven.kit.dir}/bin/genMetadata.bat" else="${tolven.kit.dir}/bin/genMetadata.sh">
			<os family="windows" />
		</condition>
		<condition property="tpf" value="${tolven.kit.dir}/bin/tpf.bat" else="${tolven.kit.dir}/bin/tpf.sh">
			<os family="windows" />
		</condition>
	</target>

	<target name="install-requirements" depends="props" description="install-requirements">
		<fail message="glassfish.zip must be set" unless="glassfish.zip" />
		<fail message="jdbc.driver must be set" unless="jdbc.driver" />
		<fail message="${glassfish.zip} does not exist">
			<condition>
				<not>
					<available file="${glassfish.zip}" />
				</not>
			</condition>
		</fail>
		<fail message="${jdbc.driver} does not exist">
			<condition>
				<not>
					<available file="${jdbc.driver}" />
				</not>
			</condition>
		</fail>
		<fail message="${glassfish.dir} already exists">
			<condition>
				<available file="${glassfish.dir}" />
			</condition>
		</fail>
		<fail message="${common.keystore.src} must exist">
			<condition>
				<not>
					<available file="${common.keystore.src}" />
				</not>
			</condition>
		</fail>
		<fail message="${common.truststore.src} must exist">
			<condition>
				<not>
					<available file="${common.truststore.src}" />
				</not>
			</condition>
		</fail>
		<fail message="${mdbuser.keystore.src} must exist">
			<condition>
				<not>
					<available file="${mdbuser.keystore.src}" />
				</not>
			</condition>
		</fail>
		<echo message="${ant.project.name} install-requirements VERIFIED" />
		<echo message="${ant.project.name} to uninstall, remove: ${glassfish.dir}" />
	</target>

	<target name="install" depends="props" description="install">
		<guide-echo args="Install Glassfish" />
		<guide-echo args="" />

		<guide-echo args="Unzip: ${glassfish.zip} to ${glassfish.parent.dir}" />
		<delete dir="${java.io.tmpdir}/glassfishv3" />
		<unzip src="${glassfish.zip}" dest="${java.io.tmpdir}" />
		<move todir="${glassfish.dir}">
			<fileset dir="${java.io.tmpdir}/glassfishv3" />
		</move>

		<guide-echo args="Rename ${glassfish.dir}/glassfish/domains/domain1 to ${glassfish.dir}/glassfish/domains/tolven" />
		<move todir="${glassfish.dir}/glassfish/domains/tolven">
			<fileset dir="${glassfish.dir}/glassfish/domains/domain1" />
		</move>
		<guide-echo args="" />

		<guide-echo args="Copy SSL keystore from ${glassfish.keystore} to ${common.keystore}" />
		<copy file="${common.keystore.src}" tofile="${glassfish.keystore}" overwrite="false" verbose="true" />

		<guide-echo args="Copy SSL truststore from ${common.truststore.src} to ${tolven.opends.truststore}" />
		<copy file="${common.truststore.src}" tofile="${glassfish.truststore}" overwrite="false" verbose="true" />

		<guide-echo args="Copy mdbuser keystore from ${mdbuser.keystore.src} to ${mdbuser.keystore}" />
		<copy file="${mdbuser.keystore.src}" tofile="${mdbuser.keystore}" overwrite="false" verbose="true" />

		<guide-echo args="In ${glassfish.dir}/mq/etc/imqenv.conf replace the entry 'domain1' with 'tolven'" />
		<replace token="domain1" value="tolven" file="${glassfish.dir}/mq/etc/imqenv.conf" />
		<guide-echo args="" />

		<guide-echo args="For linux ensure that the following are executable" />
		<guide-echo args="All *.sh files in ${glassfish.dir} and its subdirectories" />
		<chmod dir="${glassfish.dir}" perm="u+x" includes="**/*.sh" />
		<guide-echo args="${glassfish.dir}/bin/*.sh" />
		<chmod dir="${glassfish.dir}/bin" perm="u+x" includes="*" />
		<guide-echo args="${glassfish.dir}/mq/bin/*" />
		<chmod dir="${glassfish.dir}/mq/bin" perm="u+x" includes="*" />
		<guide-echo args="${glassfish.dir}/glassfish/bin/*" />
		<chmod dir="${glassfish.dir}/glassfish/bin" perm="u+x" includes="*" />
		<guide-echo args="" />

		<guide-echo args="Set Up a Persistent Master Password" />
		<guide-echo args="Execute the command below (switch to backslash for windows), and set the password (e.g: tolven) when prompted" />
		<echo message="NOW SAVE MASTER PASSWORD USING FOLLOWING COMMAND" />
		<guide-echo args="${glassfish.dir}/bin/asadmin change-master-password --savemasterpassword=true tolven" />
		<echo message="${glassfish.dir}/bin/asadmin change-master-password --savemasterpassword=true tolven" />
		<guide-echo args="" />

	</target>

	<target name="update-glassfish-keystore" depends="props" description="update-glassfish-keystore">
		<guide-echo args="Update Glassfish KeyStore and TrustStore" />
		<guide-echo args="Copy ${glassfish.keystore} to ${glassfish.dir}/glassfish/domains/tolven/config" />
		<guide-echo args="Copy ${glassfish.truststore} to ${glassfish.dir}/glassfish/domains/tolven/config" />
		<copy toDir="${glassfish.dir}/glassfish/domains/tolven/config" preservelastmodified="true" overwrite="true" verbose="true">
			<fileset file="${glassfish.keystore}" />
			<fileset file="${glassfish.truststore}" />
		</copy>
		<guide-echo args="" />
	</target>

	<target name="start-glassfish" depends="props" description="start-glassfish">
		<guide-echo args="Start Glassfish" />
		<exec executable="${asadmin}" dir="${glassfish.dir}/bin" spawn="true">
			<arg line="--echo start-domain tolven" />
		</exec>
		<echo message="Waiting for Glassfish to start..." />
		<waitfor maxwait="60" maxwaitunit="second" timeoutproperty="timed.out">
			<socket server="${tolven.domain}" port="${glassfish.admin.port}" />
		</waitfor>
		<fail message="glassfish appears to not have started nothing listening on port: ${glassfish.admin.port}" if="timed.out" />
		<echo message="Done" />
		<guide-echo args="" />
	</target>

	<target name="stop-glassfish" depends="props" description="stop-glassfish">
		<guide-echo args="Stop Glassfish" />
		<exec executable="${asadmin}" dir="${glassfish.dir}/bin" spawn="true">
			<arg line="--echo stop-domain tolven" />
		</exec>
		<echo message="Waiting for Glassfish to stop..." />
		<waitfor maxwait="60" maxwaitunit="second" timeoutproperty="timed.out">
			<not>
				<socket server="${tolven.domain}" port="${glassfish.admin.port}" />
			</not>
		</waitfor>
		<fail message="glassfish appears to still be listening on port: ${glassfish.admin.port}" if="timed.out" />
		<echo message="Done" />
		<guide-echo args="" />
	</target>

	<target name="config-glassfish" depends="props" description="config-glassfish">
		<guide-echo args="Configure Glassfish" />
		<guide-echo args="" />

		<guide-echo args="Execute the following asadmin commands" />
		<guide-echo args="cd ${glassfish.dir}/bin" />
		<asadmin args="set server-config.iiop-service.iiop-listener.orb-listener-1.enabled=false" />
		<asadmin args="set server-config.iiop-service.iiop-listener.SSL.enabled=false" />
		<asadmin args="set server-config.iiop-service.iiop-listener.SSL_MUTUALAUTH.enabled=false" />
		<asadmin args="set server-config.iiop-service.iiop-listener.SSL.ssl.cert-nickname=tolven" />
		<asadmin args="set server-config.iiop-service.iiop-listener.SSL_MUTUALAUTH.ssl.cert-nickname=tolven" />
		<asadmin args="set server-config.network-config.network-listeners.network-listener.http-listener-1.address=${tolven.domain}" />
		<asadmin args="set server-config.network-config.network-listeners.network-listener.http-listener-1.port=${tolven.http.port}" />
		<asadmin args="set server-config.network-config.network-listeners.network-listener.http-listener-2.address=${tolven.domain}" />
		<asadmin args="set server-config.network-config.network-listeners.network-listener.http-listener-2.port=${tolven.https.port}" />
		<asadmin args="set server-config.network-config.protocols.protocol.http-listener-1.http.server-name=${tolven.domain}:${tolven.policy.http.port}" />
		<asadmin args="set server-config.network-config.protocols.protocol.http-listener-2.ssl.ssl3-enabled=true" />
		<asadmin args="set server-config.network-config.protocols.protocol.http-listener-2.ssl.cert-nickname=tolven" />
		<asadmin args="set server-config.network-config.protocols.protocol.http-listener-2.http.server-name=${tolven.domain}:${tolven.policy.https.port}" />
		<asadmin args="set property.administrative.domain.name.value=tolven" />
		<asadmin args="delete-jvm-options -client" />
		<asadmin args="delete-jvm-options -XX\:MaxPermSize=192m" />
		<asadmin args="create-jvm-options -server" />
		<asadmin args="create-jvm-options -Xms512m" />
		<asadmin args="delete-jvm-options -Xmx512m" />
		<asadmin args="create-jvm-options -Xmx1024m" />
		<asadmin args="create-jvm-options -XX\:PermSize=256m" />
		<asadmin args="create-jvm-options -XX\:MaxPermSize=512m" />
		<asadmin args="create-jvm-options -XX\:+UseConcMarkSweepGC" />
		<asadmin args="create-jvm-options -XX\:+CMSClassUnloadingEnabled" />
		<asadmin args="create-jvm-options -Dsun.rmi.dgc.client.gcInterval=3600000" />
		<asadmin args="create-jvm-options -Dsun.rmi.dgc.server.gcInterval=3600000" />
		<asadmin args="create-jvm-options -Dxa-driver-does-not-support-non-tx-operations=true" />
		<asadmin args="create-jvm-options -Dlog4j.configuration=file\:///${com.sun.aas.instanceRoot}/config/log4j.xml" />
		<asadmin args="create-jvm-options -Djava.security.egd=file\:///dev/urandom" />
		<asadmin args="create-jvm-options -Dcom.sun.xml.ws.fault.SOAPFaultBuilder.disableCaptureStackTrace=false" />
		<guide-echo args="" />
	</target>

	<target name="prepare-tolven-glassfish" depends="props" description="prepare-tolven-glassfish">
		<guide-echo args="Prepare Glassfish For Tolven" />
		<guide-echo args="" />

		<concat destfile="${imq.dest.config.properties.file}">
			<path location="${database.properties.file}" />
			<filterchain>
				<expandproperties />
			</filterchain>
		</concat>
		<loadfile property="config.properties.file.content" srcFile="${imq.dest.config.properties.file}" />
		<guide-echo args="Add the content between asterisks to a file called: ${imq.dest.config.properties.file}" />
		<guide-echo args="**********" />
		<guide-echo args="${config.properties.file.content}" />
		<guide-echo args="**********" />
		<guide-echo args="" />

		<guide-echo args="Create file ${imq.accesscontrol.properties}" />
		<guide-echo args="Add the content between asterisks to it" />
		<guide-echo args="**********" />
		<guide-echo args="version=JMQFileAccessControlModel/100" />
		<concat destfile="${imq.accesscontrol.properties}" append="false">version=JMQFileAccessControlModel/100</concat>
		<concat destfile="${imq.accesscontrol.properties}" append="true">${line.separator}</concat>
		<guide-echo args="connection.NORMAL.allow.user=admin" />
		<concat destfile="${imq.accesscontrol.properties}" append="true">connection.NORMAL.allow.user=admin</concat>
		<concat destfile="${imq.accesscontrol.properties}" append="true">${line.separator}</concat>
		<guide-echo args="connection.ADMIN.allow.user=admin" />
		<concat destfile="${imq.accesscontrol.properties}" append="true">connection.ADMIN.allow.user=admin</concat>
		<guide-echo args="**********" />
		<guide-echo args="" />

		<guide-echo args="Install Database Driver In Glassfish" />
		<guide-echo args="Copy ${jdbc.driver} to ${glassfish.dir}/glassfish/domains/tolven/lib" />
		<copy file="${jdbc.driver}" todir="${glassfish.dir}/glassfish/domains/tolven/lib" verbose="true" />
		<guide-echo args="" />
		<guide-echo args="Install MQKeyStore In Glassfish" />
		<guide-echo args="Copy ${mdbuser.keystore} to ${glassfish.config.dir}" />
		<copy file="${mdbuser.keystore}" todir="${glassfish.config.dir}" verbose="true" />
		<guide-echo args="" />

		<guide-echo args="Deploy Tolven Glassfish Libraries" />
		<tpf args="-plugin org.tolven.deploy.glassfish -config" />

		<guide-echo args="Delete ${glassfish.dir}/glassfish/domains/tolven/docroot/index.html" />
		<delete file="${glassfish.dir}/glassfish/domains/tolven/docroot/index.html" />
		<guide-echo args="" />
	</target>

	<target name="config-tolven-glassfish" depends="props" description="config-tolven-glassfish">
		<guide-echo args="Configure Tolven Glassfish" />
		<guide-echo args="" />

		<antcall target="include-config-policyagent" />
		
		<guide-echo args="Create Resource Adaptor Configuration" />
		<asadmin args="create-resource-adapter-config --property keyStoreURL=file\:///${com.sun.aas.instanceRoot}/config/${mdbuser.keystore.filename}:keyStoreType=${mdbuser.keystore.type}:keyStorePassword=${mdbuser.password}:defaultAlias=${mdbuser.defaultAlias} --threadpoolid thread-pool-1 mqKeyStore" />
		<guide-echo args="" />

		<guide-echo args="Deploy the mqKeyStore.rar" />
		<tpf args="-plugin org.tolven.deploy.glassfish -rarPlugins org.tolven.mqkeystore" />

		<guide-echo args="Check that mqKeyStore.rar is deployed i.e. the following file exists: ${glassfish.dir}/glassfish/domains/tolven/autodeploy/mqKeyStore.rar_deployed" />
		<echo message="Waiting for mqKeyStore.rar to deploy..." />
		<waitfor maxwait="60" maxwaitunit="second" timeoutproperty="timed.out">
			<available file="${glassfish.dir}/glassfish/domains/tolven/autodeploy/mqKeyStore.rar_deployed" />
		</waitfor>
		<guide-echo args="" />
		<fail message="mqKeyStore.rar failed to deploy">
			<condition>
				<available file="${glassfish.dir}/glassfish/domains/tolven/autodeploy/mqKeyStore.rar_failed" />
			</condition>
		</fail>
		<echo message="Done" />

		<guide-echo args="Execute the following asadmin commands:" />
		<asadmin args="delete-jdbc-connection-pool --cascade DerbyPool" />
		<asadmin args="list-jdbc-connection-pools" />
		<asadmin args="${db.asadmin.command}" />
		<asadmin args="list-jdbc-connection-pools" />
		<asadmin args="ping-connection-pool TolvenDataSource" />
		<asadmin args="create-jdbc-resource --description &quot;TolvenDataSource&quot; --connectionpoolid TolvenDataSource jdbc/__default" />
		<asadmin args="list-jdbc-resources" />
		<asadmin args="delete-jdbc-connection-pool --cascade __TimerPool" />
		<asadmin args="list-jdbc-connection-pools" />
		<asadmin args="create-jdbc-resource --description &quot;Timer&quot; --connectionpoolid TolvenDataSource jdbc/__TimerPool" />
		<asadmin args="create-jms-resource --restype javax.jms.ConnectionFactory --property UserName=${imquser}:Password=${imquser.password} jms/JmsXA" />
		<asadmin args="list-jms-resources" />
		<asadmin args="--user admin set server.jms-service.jms-host.default_JMS_host.admin-password=${imquser.password}" />
		<guide-echo args="" />

		<guide-echo args="Create an empty file, which will later be automatically populated with the imq password ${imq.passwd.file}" />
		<touch file="${imq.passwd.file}" />
		<guide-echo args="" />

		<guide-echo args="Create imquser password" />
		<guide-echo args="${imqusermgr} add -u ${imquser} -p ${imquser.password}" />
		<exec executable="${imqusermgr}" dir="${glassfish.dir}/mq/bin" failonerror="true">
			<arg line="add -u ${imquser} -p ${imquser.password}" />
		</exec>
		<guide-echo args="" />

		<property name="jms.dest.list.file" value="${java.io.tmpdir}/jmsdest-list.txt" />
		<delete file="${jms.dest.list.file}" />
		<exec executable="${asadmin}" dir="${glassfish.dir}/bin" failonerror="true" output="${jms.dest.list.file}">
			<arg line="--echo list-jmsdest" />
		</exec>
		<condition property="jmsdest.adminApp.exists">
			<resourcecontains resource="${jms.dest.list.file}" substring="adminApp" />
		</condition>
		<condition property="jmsdest.generator.exists">
			<resourcecontains resource="${jms.dest.list.file}" substring="generator" />
		</condition>
		<condition property="jmsdest.invitation.exists">
			<resourcecontains resource="${jms.dest.list.file}" substring="invitation" />
		</condition>
		<condition property="jmsdest.rule.exists">
			<resourcecontains resource="${jms.dest.list.file}" substring="rule" />
		</condition>
		<delete file="${jms.dest.list.file}" />

		<guide-echo args="Create JMS Queues" />
		<antcall target="create-jmsdest-adminApp" />
		<antcall target="create-jmsdest-generator" />
		<antcall target="create-jmsdest-invitation" />
		<antcall target="create-jmsdest-rule" />
		<guide-echo args="" />

		<guide-echo args="Execute the following asadmin commands" />
		<asadmin args="list-jms-resources" />
		<asadmin args="create-jms-resource --restype javax.jms.Queue --property Name=adminApp queue/adminApp" />
		<asadmin args="create-jms-resource --restype javax.jms.Queue --property Name=generator queue/generator" />
		<asadmin args="create-jms-resource --restype javax.jms.Queue --property Name=invitation queue/invitation" />
		<asadmin args="create-jms-resource --restype javax.jms.Queue --property Name=rule queue/rule" />
		<asadmin args="create-connector-connection-pool --raname mqKeyStore --connectiondefinition org.tolven.connectors.mqkeystore.api.MQKeyStoreConnectionFactory mqKeyStore" />
		<asadmin args="list-connector-connection-pools" />
		<asadmin args="create-connector-resource --poolname mqKeyStore mqKeyStore" />
		<asadmin args="list-jndi-entries" />
		<asadmin args="set server.thread-pools.thread-pool.http-thread-pool.max-thread-pool-size=100" />
		<guide-echo args="" />

		<echo message="Assemble Tolven EAR File" />
		<tpf args="-plugin org.tolven.deploy.glassfish -earPlugins org.tolven.component.tolvenear" />

		<echo message="Waiting for tolven.ear to deploy..." />
		<guide-echo args="Check that tolven.ear has deployed by the existence of ${glassfish.dir}/glassfish/domains/tolven/autodeploy/tolven.ear_deployed" />
		<waitfor maxwait="300" maxwaitunit="second" timeoutproperty="timed.out">
			<available file="${glassfish.dir}/glassfish/domains/tolven/autodeploy/tolven.ear_deployed" />
		</waitfor>
		<guide-echo args="" />
		<fail message="tolven.ear failed to deploy">
			<condition>
				<available file="${glassfish.dir}/glassfish/domains/tolven/autodeploy/tolven.ear_failed" />
			</condition>
		</fail>
		<echo message="Done" />
	</target>

	<target name="include-config-policyagent" unless="exclude.policyagent">
		<guide-echo args="Check that agentapp.war is deployed i.e. the following file exists: ${glassfish.dir}/glassfish/domains/tolven/autodeploy/agentapp.war_deployed" />
		<echo message="Waiting for agentapp.war to deploy..." />
		<waitfor maxwait="60" maxwaitunit="second" timeoutproperty="timed.out">
			<available file="${glassfish.dir}/glassfish/domains/tolven/autodeploy/agentapp.war_deployed" />
		</waitfor>
		<guide-echo args="" />
		<fail message="agentapp.war failed to deploy">
			<condition>
				<available file="${glassfish.dir}/glassfish/domains/tolven/autodeploy/agentapp.war_failed" />
			</condition>
		</fail>
		<echo message="Done" />

	</target>

	<target name="create-jmsdest-adminApp" description="create-jmsdest-adminApp" unless="jmsdest.adminApp.exists">
		<asadmin args="create-jmsdest --desttype queue adminApp" />
	</target>

	<target name="create-jmsdest-generator" description="create-jmsdest-generator" unless="jmsdest.generator.exists">
		<asadmin args="create-jmsdest --desttype queue generator" />
	</target>

	<target name="create-jmsdest-invitation" description="create-jmsdest-invitation" unless="jmsdest.invitation.exists">
		<asadmin args="create-jmsdest --desttype queue invitation" />
	</target>

	<target name="create-jmsdest-rule" description="create-jmsdest-rule" unless="jmsdest.rule.exists">
		<asadmin args="create-jmsdest --desttype queue rule" />
	</target>

	<macrodef name="asadmin">
		<attribute name="args" />
		<sequential>
			<basename property="asadmin.basename" file="${asadmin}" />
			<guide-echo args="${asadmin.basename} --echo @{args}" />
			<exec executable="${asadmin}" dir="${glassfish.dir}/bin" failonerror="true">
				<arg line="--echo @{args}" />
			</exec>
			<echo message="Done" />
			<echo message="" />
		</sequential>
	</macrodef>

	<macrodef name="tpf">
		<attribute name="args" />
		<sequential>
			<guide-echo args="cd ${tolven.kit.dir}/bin" />
			<basename property="tpf.basename" file="${tpf}" />
			<guide-echo args="${tpf.basename} @{args}" />
			<echo message="${tpf} @{args}" />
			<exec executable="${tpf}" dir="${tolven.kit.dir}/bin" failonerror="true">
				<arg line="@{args}" />
			</exec>
			<echo message="Done" />
			<echo message="" />
			<guide-echo args="" />
		</sequential>
	</macrodef>

	<macrodef name="guide-echo">
		<attribute name="args" />
		<sequential>
			<echo message="@{args}${line.separator}" file="${guide.file}" append="true" />
		</sequential>
	</macrodef>

</project>
