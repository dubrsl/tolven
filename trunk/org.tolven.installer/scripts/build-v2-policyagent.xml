<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="build-policyagent">

	<property file="build-v2-override.properties" />
	<property file="${password.properties.file}" />
	<property file="build-v2.properties" />
	<property file="${database.properties.file}" />

	<target name="props">
		<condition property="root.dir.default" value="c:" else="/usr/local">
			<os family="windows" />
		</condition>
		<property name="j2eeagent.dir" value="${glassfish.dir}/glassfish/j2ee_agents/appserver_v10_agent" />
		<property name="j2eeagent.bin.dir" value="${j2eeagent.dir}/bin" />
		<property name="j2eeagent.war.file" value="${j2eeagent.dir}/etc/agentapp.war" />
		<property name="agentauthpassword.file" value="${j2eeagent.bin.dir}/agentauthpassword" />
		<basename property="agentadmin.src.answers.filename" file="${agentadmin.src.answers.file}" />
		<property name="agentadmin.dest.answers.file" value="${j2eeagent.bin.dir}/${agentadmin.src.answers.filename}" />
		<property name="glassfish.deploy.dir" value="${glassfish.dir}/glassfish/domains/tolven/autodeploy" />
		<condition property="agentadmin" value="${glassfish.dir}/glassfish/j2ee_agents/appserver_v10_agent/bin/agentadmin.bat" else="${glassfish.dir}/glassfish/j2ee_agents/appserver_v10_agent/bin/agentadmin">
			<os family="windows" />
		</condition>
	</target>

	<target name="install-requirements" depends="props" description="install-requirements">
		<fail message="policyagent.zip must be set" unless="policyagent.zip" />
		<fail message="${policyagent.zip} does not exist">
			<condition>
				<not>
					<available file="${policyagent.zip}" />
				</not>
			</condition>
		</fail>
		<fail message="${j2eeagent.dir} already exists">
			<condition>
				<available file="${j2eeagent.dir}" />
			</condition>
		</fail>
		<echo message="${ant.project.name} install-requirements VERIFIED" />
		<echo message="${ant.project.name} to uninstall, remove: ${j2eeagent.dir} and remove: J2EE Agent: ${j2ee.agent} from OpenAM" />
	</target>

	<target name="install" depends="props" description="install">
		<guide-echo args="Install Policy Agent" />
		<guide-echo args="" />

		<guide-echo args="Unzip: ${policyagent.zip} to ${glassfish.dir}/glassfish" />
		<unzip src="${policyagent.zip}" dest="${glassfish.dir}/glassfish" />
		<guide-echo args="" />
		<guide-echo args="Secure Policy Agent by add the following java options to ${agentadmin}" />
		<guide-echo args="-Djavax.net.ssl.keyStore=c:/tolven-config/credentials/dev.able.com/keystore.jks" />
		<guide-echo args="-Djavax.net.ssl.keyStorePassword=tolven" />
		<guide-echo args="-Djavax.net.ssl.trustStore=c:/tolven-config/credentials/dev.able.com/cacerts.jks" />
		<guide-echo args="-Djavax.net.ssl.trustStorePassword=tolven" />
		<replace token=" -classpath " value=" -Djavax.net.ssl.keyStore=${glassfish.keystore} -Djavax.net.ssl.keyStorePassword=${glassfish.keystore.password} -Djavax.net.ssl.trustStore=${glassfish.truststore} -Djavax.net.ssl.trustStorePassword=${glassfish.truststore.password} -Djava.security.egd=file:///dev/urandom -classpath " file="${agentadmin}" />
		<guide-echo args="" />
		<guide-echo args="Create the file agentpassword.txt containing a password for TolvenRESTfulAgent (default: ${admin.password.default})" />
		<concat destfile="${agentauthpassword.file}" append="false">${agentauth.password}</concat>
		<concat destfile="${agentauthpassword.file}" append="true">${line.separator}</concat>
		<guide-echo args="For linux ensure that only permission is read only for owner for ${agentauthpassword.file}" />
		<chmod file="${agentauthpassword.file}" perm="400" />
		<concat destfile="${agentadmin.dest.answers.file}">
			<path location="${agentadmin.src.answers.file}" />
			<filterchain>
				<expandproperties />
			</filterchain>
		</concat>
		<guide-echo args="For linux ensure that ${agentadmin} is executable" />
		<chmod file="${agentadmin}" perm="u+x" />
		<guide-echo args="" />
	</target>

	<target name="config-policyagent" depends="props" description="config-policyagent">
		<guide-echo args="Configure Policy Agent" />
		<guide-echo args="" />

		<guide-echo args="cd ${j2eeagent.bin.dir}" />
		<basename property="agentadmin.basename" file="${agentadmin}"  />
		<guide-echo args="${agentadmin.basename} --custom-install" />
		<loadfile property="policyagent.answers" srcFile="${agentadmin.dest.answers.file}" />
		<guide-echo args="The answers to the custom questions appear between asterisks below. The empty line represents 'Hit Enter Key' to accept the default" />
		<guide-echo args="**********" />
		<guide-echo args="${policyagent.answers}" />
		<guide-echo args="**********" />
		<guide-echo args="" />
		<exec executable="${agentadmin}" dir="${j2eeagent.bin.dir}" input="${agentadmin.dest.answers.file}" failonerror="true">
			<arg line="--custom-install" />
		</exec>
		<property name="agent.bootstrap.properties.file" value="${glassfish.dir}/glassfish/j2ee_agents/appserver_v10_agent/Agent_001/config/OpenSSOAgentBootstrap.properties" />
		<guide-echo args="Update Policy Agent Bootstrap File" />
		<guide-echo args="In ${agent.bootstrap.properties.file}" />
		<guide-echo args="Replace: com.sun.identity.agents.app.username = ${j2ee.agent}" />
		<guide-echo args="With: com.sun.identity.agents.app.username = agentAuth" />
		<replace token="com.sun.identity.agents.app.username = ${j2ee.agent}" value="com.sun.identity.agents.app.username = agentAuth" file="${agent.bootstrap.properties.file}" />
		<guide-echo args="" />
		<guide-echo args="Copy ${j2eeagent.war.file} to the Glassfish deploy directory ${glassfish.deploy.dir}" />
		<copy file="${j2eeagent.war.file}" todir="${glassfish.deploy.dir}" verbose="true" />
		<guide-echo args="" />
	</target>

	<macrodef name="guide-echo">
		<attribute name="args" />
		<sequential>
			<echo message="@{args}${line.separator}" file="${guide.file}" append="true" />
		</sequential>
	</macrodef>

</project>
