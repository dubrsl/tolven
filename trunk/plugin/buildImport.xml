<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	A generic plugin build file. Import this into your plugin project something like this:
	<import file="../plugin/buildImport.xml"/>
	This adds targets.
	-->
<project name="pluginImport">
	<import file="../plugin/buildCommon.xml" />

	<!--
	Load up the plugin manifest which is the source of truth for the plugin.
	-->
	<xmlproperty file="manifest/tolven-plugin.xml" />

	<!--
	The name of the resulting zip file containing the packaged zip file
	-->
	<property name="zipFileName" value="build/${plugin(id)}-${plugin(version)}.zip" />
	<property name="devLibFileName" value="${plugin(id)}.devLib.jar" />

	<target name="clean" description="Clean">
		<delete dir="build" />
	</target>

	<target name="init" depends="clean">
		<mkdir dir="build" />
	</target>

	<target name="build-plugin">
		<fail>Your plugin is missing a build_plugin target</fail>
	</target>

	<target name="-check-devLib-file" unless="devLibfile.exists">
		<available property="devLibfile.exists" file="build/devLib.jar" />
	</target>

	<target name="populate-dev-lib" depends="-check-devLib-file" if="${devLibfile.exists}">
		<copy file="build/devLib.jar" toFile="${tolven.devLib}/${devLibFileName}" preservelastmodified="true" />
	</target>

	<target name="dir.check">
		<condition property="dir.exists">
			<available file="jars" type="dir" />
		</condition>
	</target>

	<target name="populate-dev-lib-library" depends="dir.check" if="dir.exists">
		<copy todir="${tolven.devLib}">
			<fileset dir="jars">
				<exclude name="lib/*" />
			</fileset>
			<mapper type="glob" from="*.jar" to="${plugin(id)}.*.jar" />
		</copy>
	</target>

	<!-- This target is executed via the buildAll check-plugin-versions target, which supplies the necessary properties -->
	<target name="log-plugin-local-version">
		<fail unless="plugins-local.log" />
		<fail unless="plugins-published.log" />
		<fail unless="plugins-unpublished.log" />
		<fail message="Could not find: ${plugins-published.log}">
			<condition>
				<not><available file="${plugins-published.log}" /></not>
			</condition>
		</fail>
		<property name="pluginVersion" value="${plugin(id)}-${plugin(version)}" />
		<echo message="${pluginVersion}${line.separator}" file="${plugins-local.log}" append="true" />
		<condition property="plugin-unpublished">
			<and>
				<available file="${plugins-published.log}" />
				<not><resourcecontains resource="${plugins-published.log}" substring="${pluginVersion}" /></not>
			</and>
		</condition>
		<antcall target="log-plugin-unpublished-version" />
	</target>

	<target name="log-plugin-unpublished-version" if="plugin-unpublished">
		<echo message="${pluginVersion}${line.separator}" file="${plugins-unpublished.log}" append="true" />
	</target>

	<target name="gen-build-plugin">
		<echo message="${ant.project.name}" />
		<antcall target="build-plugin" />
		<!-- Copy devLib to tolven-config/devLib -->
		<antcall target="populate-dev-lib" />
		<antcall target="populate-dev-lib-library" />
	</target>

	<!--
	Copy this plugin to the local repository and recalculate the metadata file in that repository.
	This is the same as genMetadata at the command line
	-->
	<target name="deploy-to-local-repository" depends="build-plugin" description="Update Local Repository">
		<copy toDir="${respositoryLocal.location}/plugins" flatten="true" preservelastmodified="true">
			<fileset dir=".">
				<include name="${zipFileName}" />
			</fileset>
		</copy>
		<java fork="true" failonerror="true" classname="org.tolven.plugin.boot.TPFBoot" classpathref="project.classpath">
			<env key="TOLVEN_CONFIG_DIR" value="${tolvenConfig.location}" />
			<arg line="-genMetadata -plugins ${respositoryLocal.location}/plugins -liburl file:///${respositoryLocal.location} -outdir ${respositoryLocal.location}" />
		</java>
	</target>

	<target name="gen-deploy-to-local-repository" description="Update Local Repository">
		<copy toDir="${respositoryLocal.location}/plugins" flatten="true" preservelastmodified="true">
			<fileset dir=".">
				<include name="${zipFileName}" />
			</fileset>
		</copy>
		<java fork="true" failonerror="true" classname="org.tolven.plugin.boot.TPFBoot" classpathref="project.classpath">
			<env key="TOLVEN_CONFIG_DIR" value="${tolvenConfig.location}" />
			<arg line="-genMetadata -plugins ${respositoryLocal.location}/plugins -liburl file:///${respositoryLocal.location} -outdir ${respositoryLocal.location}" />
		</java>
	</target>

	<target name="copy-plugin-to-local-repository" description="Copy to repositoryLocal requires a separate genMetadata afterward">
		<copy toDir="${respositoryLocal.location}/plugins" flatten="true" preservelastmodified="true">
			<fileset dir=".">
				<include name="${zipFileName}" />
			</fileset>
		</copy>
	</target>

	<!-- Compile sources (from src folder) if needed -->
	<target name="compileSection" depends="compileSectionCheck" if="compileSection${section}">
		<mkdir dir="${buildFolder}/${section}/classes" />
		<javac destdir="${buildFolder}/${section}/classes" debug="true" encoding="UTF-8">
			<src path="${section}/source" />
			<classpath>
				<fileset dir="${section}">
					<include name="lib/**/*.jar" />
				</fileset>
				<pathelement path="${lib}" />
			</classpath>
			<classpath refid="project.classpath" />
		</javac>
	</target>

	<target name="zipSourceSection" if="zipSourceSection${section}">
		<zip destfile="${buildFolder}/devLib.jar" update="true">
			<zipfileset dir="${section}/source" />
		</zip>
	</target>

	<target name="compileSectionCheck">
		<!-- Include sources in devLib if requested -->
		<available property="compileSection${section}" file="${section}/source" />
	</target>

	<!-- Build one section, also add source/classes to the devLib -->
	<target name="buildSection">
		<!-- As soon as erroronmissingdir in zipfileset is supported, the following line can be removed-->
		<mkdir dir="${buildFolder}/${section}/classes" />
		<!-- Compile -->
		<antcall target="compileSection">
			<param name="section" value="${section}" />
		</antcall>
		<!-- Zip the section (except source) -->
		<condition property="sectionZipIncludesFALSEsectionZipExcludesFALSE">
			<and>
				<not>
					<isset property="sectionZipIncludes" />
				</not>
				<not>
					<isset property="sectionZipExcludes" />
				</not>
			</and>
		</condition>
		<condition property="sectionZipIncludesTRUEsectionZipExcludesFALSE">
			<and>
				<isset property="sectionZipIncludes" />
				<not>
					<isset property="sectionZipExcludes" />
				</not>
			</and>
		</condition>
		<condition property="sectionZipIncludesFALSEsectionZipExcludesTRUE">
			<and>
				<not>
					<isset property="sectionZipIncludes" />
				</not>
				<isset property="sectionZipExcludes" />
			</and>
		</condition>
		<condition property="sectionZipIncludesTRUEsectionZipExcludesTRUE">
			<and>
				<isset property="sectionZipIncludes" />
				<isset property="sectionZipExcludes" />
			</and>
		</condition>
		<antcall target="sectionZipIncludesFALSEsectionZipExcludesFALSE" />
		<antcall target="sectionZipIncludesTRUEsectionZipExcludesFALSE" />
		<antcall target="sectionZipIncludesFALSEsectionZipExcludesTRUE" />
		<antcall target="sectionZipIncludesTRUEsectionZipExcludesTRUE" />
		<!-- Zip devLib content -->
		<zip destfile="${buildFolder}/devLib.jar" update="true">
			<zipfileset dir="${buildFolder}/${section}/classes" />
		</zip>
		<!-- Include sources in devLib if requested -->
		<condition property="zipSourceSection${section}">
			<and>
				<available file="${section}/source" />
				<equals arg1="true" arg2="${includeSourceInDevLib}" casesensitive="false" />
			</and>
		</condition>
		<antcall target="zipSourceSection">
			<!--	<param name="section" value="${section}"/> -->
		</antcall>
	</target>

	<!-- Original configuration prior to introduction of sectionZipIncludes and sectionZipExcludes -->
	<target name="sectionZipIncludesFALSEsectionZipExcludesFALSE" if="sectionZipIncludesFALSEsectionZipExcludesFALSE">
		<zip destfile="${zipFileName}" whenempty="create" update="true">
			<zipfileset dir="${section}" prefix="${section}">
				<include name="**/*" />
				<exclude name="**/source/" />
			</zipfileset>
			<zipfileset dir="${buildFolder}/${section}/classes" prefix="${section}/classes">
				<include name="**/*" />
			</zipfileset>
		</zip>
	</target>

	<target name="sectionZipIncludesTRUEsectionZipExcludesFALSE" if="sectionZipIncludesTRUEsectionZipExcludesFALSE">
		<zip destfile="${zipFileName}" whenempty="create" update="true">
			<zipfileset dir="${buildFolder}/${section}" includes="${sectionZipIncludes}" prefix="${section}" />
			<zipfileset dir="${section}" includes="${sectionZipIncludes}" />
		</zip>
	</target>

	<target name="sectionZipIncludesFALSEsectionZipExcludesTRUE" if="sectionZipIncludesFALSEsectionZipExcludesTRUE">
		<zip destfile="${zipFileName}" whenempty="create" update="true">
			<zipfileset dir="${buildFolder}/${section}" excludes="${sectionZipExcludes}" prefix="${section}" />
			<zipfileset dir="${section}" excludes="${sectionZipExcludes}" />
		</zip>
	</target>

	<target name="sectionZipIncludesTRUEsectionZipExcludesTRUE" if="sectionZipIncludesTRUEsectionZipExcludesTRUE">
		<zip destfile="${zipFileName}" whenempty="create" update="true">
			<zipfileset dir="${buildFolder}/${section}" includes="${sectionZipIncludes}" excludes="${sectionZipExcludes}" prefix="${section}" />
			<zipfileset dir="${section}" includes="${sectionZipIncludes}" excludes="${sectionZipExcludes}" />
		</zip>
	</target>

</project>
